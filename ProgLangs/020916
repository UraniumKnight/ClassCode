#lang plai-typed
; turn into eager evaluation instead of lazy
; complete this with repl function
;     the list of fdefs stored in this function
;     use display
; add if
; lift the - (both kinds) out of the sugar
; add booleans: and, or, not

; Core language
(define-type ExprC
  [numC (n : number)]
  [idC (s : symbol)]
  [appC (fun : symbol) (arg : ExprC)]
  [plusC (l : ExprC) (r : ExprC)]
  [multC (l : ExprC) (r : ExprC)]
  )

(define-type FunDefC
  [fdC (name : symbol) (arg  : symbol) (body : ExprC)])

(define (interp [ a : ExprC ] [ fdefs : (listof FunDefC) ] ) : number
  (type-case ExprC a
    [numC (n) n]
    [idC (s) (error s "Unbound identifier.")]
    [appC (f a) (local ((define thisFun (lookup f fdefs)))
                  (interp (subz a (fdC-arg thisFun) (fdC-body thisFun)) fdefs))]
    [plusC (l r) (+ (interp l fdefs) (interp r fdefs))]
    [multC (l r) (* (interp l fdefs) (interp r fdefs))]))

(define (lookup [ fn : symbol ] [ lof : (listof FunDefC) ]) : FunDefC
  (cond
    [(empty? lof) (error fn "unknown function.")]
    [(symbol=? fn (fdC-name (first lof))) (first lof)]
    [else (lookup fn (rest lof))]))

(define (subz [ what : ExprC ] [ arg : symbol ] [ in : ExprC ]) : ExprC
  (type-case ExprC in
    [numC (n) in]
    [idC (s) (if (symbol=? s arg) what in)]
    [appC (f a) (appC f (subz what arg a))]
    [plusC (l r) (plusC (subz what arg l) (subz what arg r))]
    [multC (l r) (multC (subz what arg l) (subz what arg r))]))

; Surface language
(define-type ArithS
  [numS (n : number)]
  [plusS (l : ArithS) (r : ArithS)]
  [multS (l : ArithS) (r : ArithS)]
  [bminusS (l : ArithS) (r : ArithS)]
  [uminusS (e : ArithS)]
  )

(define (desugar [ as : ArithS ]) : ExprC
  (type-case ArithS as
    [numS (n) (numC n)]
    [plusS (l r) (plusC (desugar l) (desugar r))]
    [multS (l r) (multC (desugar l) (desugar r))]
    [bminusS (l r) (plusC (desugar l) (multC (numC -1) (desugar r)))]
    [uminusS (e) (multC (numC -1) (desugar e))]
    ))

(define (parse [ s : s-expression ]) : ArithS
  (cond
    [(s-exp-number? s) (numS (s-exp->number s))]
    [(s-exp-list? s)
     (let ((sl (s-exp->list s)))
       (case (s-exp->symbol (first sl))
         [(+) (plusS (parse (second sl)) (parse (third sl)))]
         [(*) (multS (parse (second sl)) (parse (third sl)))]
         [(-) (if (= (length (rest sl)) 1)
                  (uminusS (parse (second sl)))
                  (bminusS (parse (second sl)) (parse (third sl))))]
         [else (error 'parse "invalid list input")]))]
    [else (error 'parse "invalid input")]))
